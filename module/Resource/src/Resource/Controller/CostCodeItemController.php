<?php
namespace Resource\Controller;

use Zend\Mvc\Controller\AbstractActionController;
use Zend\View\Model\ViewModel;

use Zend\Json\Json;

use Application\Controller\AuthController;
use Zend\Mvc\MvcEvent;
use Zend\View\Model\JsonModel;
use ZendGData\App\Exception;

class CostCodeItemController extends AuthController
{
    /**
     * @var \Resource\Entity\CostCode
     */
    private $costCode;

    public function onDispatch( MvcEvent $e )
    {
        $ccid = $this->params()->fromRoute( 'ccid', '' ); //Cost Code ID

        if ( empty($ccid) )
        {
            return $this->redirect()->toRoute( 'cost_codes' );
        }

        $costCode = $this->getEntityManager()->find( 'Resource\Entity\CostCode', $ccid );

        if ( !($costCode instanceof \Resource\Entity\CostCode) )
        {
            return $this->redirect()->toRoute( 'cost_codes' );
        }

        $this->setCostCode( $costCode );

        return parent::onDispatch( $e ); // TODO: Change the autogenerated stub
    }

    public function setCostCode( \Resource\Entity\CostCode $costCode )
    {
        $this->costCode = $costCode;
        $this->getView()->setVariable( 'costcode', $costCode );

        return $this;
    }

    public function getCostCode()
    {
        return $this->costCode;
    }

    public function indexAction()
    {
        $this->setCaption( 'Cost Codes' );


        return $this->getView();
    }

    public function fetchResourceAction()
    {
        if ( !$this->request->isXmlHttpRequest() )
        {
            throw new \Exception( 'Access denied' );
        }

        $resource = $this->getResource();

        $return_value = Array( 'error' => 1 );
        if ( !empty($resource) )
        {
            $return_value = Array(
                'error'    => 0,
                'costCode' => $resource->getCostCode()->getCostCodeId(),
                'rate'     => $resource->getCost()
            );
        }

        return new JsonModel( $return_value );
    }

    public function editAction()
    {
        try
        {
            if ( !($this->request->isXmlHttpRequest()) )
            {
                throw new \Exception( 'Illegal Request' );
            }

            $post = $this->getRequest()->getPost();

            $costCode = $this->getCostCode();

            $costCode->exchangeArray( $post );
            $this->getEntityManager()->flush();

            return new JsonModel( array( 'err' => false, 'info' => 'Cost code updated successfully!' ) );
        }
        catch ( \Exception $ex )
        {
            return new JsonModel( array( 'err' => true, 'info' => $ex->getMessage() ) );
        }
    }

    public function removeAction()
    {
        $resource = $this->getCostCode();

        $this->getEntityManager()->remove( $resource );
        $this->getEntityManager()->flush();

        $this->flashMessenger()->addSuccessMessage( 'Cost code has been removed successfully!' );

        return $this->redirect()->toRoute( 'cost_codes' );
    }
}